version: 0.2

env:
  secrets-manager:
    GoogleAdminEmail: TestGoogleAdminEmail
    SCIMEndpointUrl: TestSCIMEndpointUrl
    SCIMAccessToken: TestSCIMAccessToken
    IdentityStoreID: TestIdentityStoreId
    Region: TestRegion
  variables:
    ExpectedExitState: 0
  
phases:
  pre_build:
    commands:
      # Print all environment variables (handy for AWS CodeBuild logs)
      - env

  build:
    commands:
      - ./ssosync --version
      - aws secretsmanager  get-secret-value --secret-id=TestGoogleCredentials --query SecretString --output text | jq '.' > credentials.json
      - cat credentials.json

      # Empty query string, should sync all groups in the directory
      - ./ssosync -t "${SCIMAccessToken}" -e "${SCIMEndpointUrl}" -u "${GoogleAdminEmail}" -i "${IdentityStoreID}" -r "${Region}" -s "groups" -g ""; ExitState=$?

      - |
        if expr "${ExitState}" : "${ExpectedExitState}" >/dev/null; then
          echo "We got what we expected"
          exit 0
        else
          echo "We didn't get what we expected"
          exit 1
        fi

      # Single Prefix, should sync only sync those groups with the prefix
      - ./ssosync -t "${SCIMAccessToken}" -e "${SCIMEndpointUrl}" -u "${GoogleAdminEmail}" -i "${IdentityStoreID}" -r "${Region}" -s "groups" -g "name:PrefixA*"; ExitState=$?

      - |
        if expr "${ExitState}" : "${ExpectedExitState}" >/dev/null; then
          echo "We got what we expected"
          exit 0
        else
          echo "We didn't get what we expected"
          exit 1
        fi

      # Multi-prefix, should sync all groups matching either prefix
      - ./ssosync -t "${SCIMAccessToken}" -e "${SCIMEndpointUrl}" -u "${GoogleAdminEmail}" -i "${IdentityStoreID}" -r "${Region}" -s "groups" -g "name:PrefixA*,name:PrefixB*"; ExitState=$?	

      - |
        if expr "${ExitState}" : "${ExpectedExitState}" >/dev/null; then
          echo "We got what we expected"
          exit 0
        else
          echo "We didn't get what we expected"
          exit 1
        fi

      # Group with External Users, should sync all groups matching either prefix
      - ./ssosync -t "${SCIMAccessToken}" -e "${SCIMEndpointUrl}" -u "${GoogleAdminEmail}" -i "${IdentityStoreID}" -r "${Region}" -s "groups" -g "name:ExternalUserTest"; ExitState=$?

      - |
        if expr "${ExitState}" : "${ExpectedExitState}" >/dev/null; then
          echo "We got what we expected"
          exit 0
        else
          echo "We didn't get what we expected"
          exit 1
        fi

      # Group with Nested Groups, should sync all groups matching either prefix
      - ./ssosync -t "${SCIMAccessToken}" -e "${SCIMEndpointUrl}" -u "${GoogleAdminEmail}" -i "${IdentityStoreID}" -r "${Region}" -s "groups" -g "name:NestedGroupsTest*"; ExitState=$?

      - |
        if expr "${ExitState}" : "${ExpectedExitState}" >/dev/null; then
          echo "We got what we expected"
          exit 0
        else
          echo "We didn't get what we expected"
          exit 1
        fi
